import{createElement}from'react';import ReactDOM from'react-dom';function defineElement(a,b,{onUpdate:c,onUnmount:d}){const e=a.attributes||[];class f extends window.HTMLElement{static get observedAttributes(){return['props-json',...e]}connectedCallback(){this._mountPoint=createMountPoint(this,a),c(this,this._mountPoint)}disconnectedCallback(){this._mountPoint&&d(this,this._mountPoint)}attributeChangedCallback(){this._mountPoint&&c(this,this._mountPoint)}}a.quiet&&window.customElements.get(b)||window.customElements.define(b,f)}function isSupported(){return window.customElements&&window.customElements.define}function createMountPoint(a,{shadow:b}){if(b){const b=document.createElement('span');return a.attachShadow({mode:'open'}).appendChild(b),b}return a}const name='CustomElements';var ElementsAdapter=Object.freeze({defineElement:defineElement,isSupported:isSupported,name:'CustomElements'});function isSupported$1(){return!!window.MutationObserver}function defineElement$1(a,b,{onUpdate:c,onUnmount:d}){b=b.toLowerCase();const e=new window.MutationObserver(a=>{a.forEach(a=>{console.log('mutationobserver: mutation',a),a.addedNodes.forEach(a=>{a.nodeName.toLowerCase()!==b||c(a,a)}),a.removedNodes.forEach(a=>{a.nodeName.toLowerCase()!==b||d(a,a)})})});e.observe(document.body,{attributes:!0,childList:!0,subtree:!0})}const name$1='MutationObserver';var MutationAdapter=Object.freeze({isSupported:isSupported$1,defineElement:defineElement$1,name:'MutationObserver'});function update({component:a,attributes:b},c,d){const e=createElement(a,d);ReactDOM.render(e,c)}function unmount(a,b){ReactDOM.unmountComponentAtNode(b)}const Adapter=isSupported()?ElementsAdapter:isSupported$1()?MutationAdapter:null;if(!Adapter)throw new Error('Unsupported platform');else console.log('Remount: using adapter',Adapter.name);const adapterName=Adapter.name;function define(a,b){Object.keys(a).forEach((c)=>{const d=Object.assign({},b,toElementSpec(a[c]));Adapter.defineElement(d,c,{onUpdate(a,b){const c=getProps(a,d.attributes);update(d,b,c)},onUnmount(a,b){unmount(d,b)}})})}function toElementSpec(a){return'object'==typeof a&&a.component?a:{component:a}}function getProps(a,b){const c=a.getAttribute('props-json');if(c)return JSON.parse(c);return(b||[]).reduce((b,c)=>(b[c]=a.getAttribute(c),b),{})}export{adapterName,define};
