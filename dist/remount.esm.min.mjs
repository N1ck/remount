import{createElement}from'react';import ReactDOM from'react-dom';function inject(){if(window.HTMLElement&&window.HTMLElement._babelES5Adapter||void 0===window.Reflect||void 0===window.customElements||window.customElements.hasOwnProperty('polyfillWrapFlushCallback'))return;const b=HTMLElement;window.HTMLElement=function(){return Reflect.construct(b,[],this.constructor)},HTMLElement.prototype=b.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,b),HTMLElement._babelES5Adapter=!0}const name='CustomElements';function defineElement(a,b,{onUpdate:c,onUnmount:d,onMount:e}){inject();const f=a.attributes||[];class g extends window.HTMLElement{static get observedAttributes(){return['props-json',...f]}connectedCallback(){this._mountPoint=createMountPoint(this,a),e(this,this._mountPoint)}disconnectedCallback(){this._mountPoint&&d(this,this._mountPoint)}attributeChangedCallback(){this._mountPoint&&c(this,this._mountPoint)}}a.quiet&&window.customElements.get(b)||window.customElements.define(b,g)}function isSupported(){return window.customElements&&window.customElements.define}function createMountPoint(a,{shadow:b}){if(b&&a.attachShadow){const b=document.createElement('span');return a.attachShadow({mode:'open'}).appendChild(b),b}return a}function supportsShadow(){return!!(document&&document.body&&document.body.attachShadow)}var CustomElementsStrategy=Object.freeze({name:'CustomElements',defineElement:defineElement,isSupported:isSupported,supportsShadow:supportsShadow});const name$1='MutationObserver',observers={};function isSupported$1(){return!!window.MutationObserver}function defineElement$1(a,b,{onUpdate:c,onUnmount:d}){if(b=b.toLowerCase(),!isValidName(b)){if(a.quiet)return;throw new Error(`Remount: "${b}" is not a valid custom element name`)}if(observers[b]){if(a.quiet)return;throw new Error(`Remount: "${b}" is already registered`)}const e=new window.MutationObserver(a=>{each(a,(a)=>{each(a.addedNodes,(a)=>{checkForMount(a,b,{onUpdate:c,onUnmount:d})})})});e.observe(document.body,{childList:!0,subtree:!0}),observers[b]=!0}function checkForMount(a,b,c){a.nodeName.toLowerCase()===b?(c.onUpdate(a,a),observeForUpdates(a,c),observeForRemoval(a,c)):a.children&&a.children.length&&each(a.children,(a)=>{checkForMount(a,b,c)})}function observeForUpdates(a,{onMount:b}){const c=new window.MutationObserver(a=>{each(a,(a)=>{const c=a.target;b(c,c)})});c.observe(a,{attributes:!0})}function observeForRemoval(a,{onUnmount:b}){const c=a.parentNode,d=new window.MutationObserver(e=>{each(e,(e)=>{each(e.removedNodes,(e)=>{a!==e||(d.disconnect(c),b(a,a))})})});d.observe(c,{childList:!0,subtree:!0})}function each(a,b){for(let c=0,d=a.length;c<d;c++)b(a[c])}function isValidName(a){return!!(-1!==a.indexOf('-')&&a.match(/^[a-z][a-z0-9-]*$/))}function supportsShadow$1(){return!1}var MutationObserverStrategy=Object.freeze({name:'MutationObserver',observers:observers,isSupported:isSupported$1,defineElement:defineElement$1,supportsShadow:supportsShadow$1});function mount(a,b,c){return update(a,b,c)}function update({component:a,attributes:b},c,d){const e=createElement(a,d);ReactDOM.render(e,c)}function unmount(a,b){ReactDOM.unmountComponentAtNode(b)}var ReactAdapter=Object.freeze({mount:mount,update:update,unmount:unmount});function getStrategy(){if(void 0!==getStrategy._result)return getStrategy._result;const a=[CustomElementsStrategy,MutationObserverStrategy].reduce((a,b)=>a||b.isSupported()&&b,null);return a||console.warn('Remount: This browser doesn\'t support the MutationObserver API or the Custom Elements API. Including polyfills might fix this. Remount elements will not work. https://github.com/rstacruz/remount'),getStrategy._result=a,a}function define(a,b){const c=getStrategy();c&&Object.keys(a).forEach((d)=>{const e=Object.assign({},b,toElementSpec(a[d])),f=e.adapter||ReactAdapter;c.defineElement(e,d,{onMount(a,b){const c=getProps(a,e.attributes);f.mount(e,b,c)},onUpdate(a,b){const c=getProps(a,e.attributes);f.update(e,b,c)},onUnmount(a,b){f.unmount(e,b)}})})}function toElementSpec(a){return'object'==typeof a&&a.component?a:{component:a}}function getProps(a,b){const c=a.getAttribute('props-json');if(c)return JSON.parse(c);return(b||[]).reduce((b,c)=>(b[c]=a.getAttribute(c),b),{})}export{getStrategy,define};
