import{createElement}from'react';import ReactDOM from'react-dom';let injected;function inject(){if(injected||void 0===window.Reflect||void 0===window.customElements||window.customElements.hasOwnProperty('polyfillWrapFlushCallback'))return;const b=HTMLElement;window.HTMLElement=function(){return Reflect.construct(b,[],this.constructor)},HTMLElement.prototype=b.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,b),injected=!0}function defineElement(a,b,{onUpdate:c,onUnmount:d}){inject();const e=a.attributes||[];class f extends window.HTMLElement{static get observedAttributes(){return['props-json',...e]}connectedCallback(){this._mountPoint=createMountPoint(this,a),c(this,this._mountPoint)}disconnectedCallback(){this._mountPoint&&d(this,this._mountPoint)}attributeChangedCallback(){this._mountPoint&&c(this,this._mountPoint)}}a.quiet&&window.customElements.get(b)||window.customElements.define(b,f)}function isSupported(){return window.customElements&&window.customElements.define}function createMountPoint(a,{shadow:b}){if(b){const b=document.createElement('span');return a.attachShadow({mode:'open'}).appendChild(b),b}return a}const name='CustomElements';var ElementsAdapter=Object.freeze({defineElement:defineElement,isSupported:isSupported,name:'CustomElements'});let observers={};function isSupported$1(){return!!window.MutationObserver}function defineElement$1(a,b,{onUpdate:c,onUnmount:d}){if(b=b.toLowerCase(),!isValidName(b)){if(a.quiet)return;throw new Error(`Remount: "${b}" is not a valid custom element name`)}if(observers[b]){if(a.quiet)return;throw new Error(`Remount: "${b}" is already registered`)}const e=new window.MutationObserver(a=>{each(a,a=>{each(a.addedNodes,a=>{checkForMount(a,b,c,d)})})});e.observe(document.body,{childList:!0,subtree:!0}),observers[b]=!0}function checkForMount(a,b,c,d){a.nodeName.toLowerCase()===b?(c(a,a),observeForUpdates(a,c),observeForRemoval(a,d)):a.children&&a.children.length&&each(a.children,a=>{checkForMount(a,b,c,d)})}function observeForUpdates(a,b){const c=new window.MutationObserver(a=>{each(a,a=>{const c=a.target;b(c,c)})});c.observe(a,{attributes:!0})}function observeForRemoval(a,b){const c=a.parentNode,d=new window.MutationObserver(e=>{each(e,e=>{each(e.removedNodes,e=>{a!==e||(d.disconnect(c),b(a,a))})})});d.observe(c,{childList:!0,subtree:!0})}function each(a,b){for(let c=0,d=a.length;c<d;c++)b(a[c])}function isValidName(a){return-1!==a.indexOf('-')&&a.match(/^[a-z][a-z0-9-]*$/)}const name$1='MutationObserver';var MutationAdapter=Object.freeze({isSupported:isSupported$1,defineElement:defineElement$1,name:'MutationObserver'});function update({component:a,attributes:b},c,d){const e=createElement(a,d);ReactDOM.render(e,c)}function unmount(a,b){ReactDOM.unmountComponentAtNode(b)}const Adapter=isSupported()?ElementsAdapter:isSupported$1()?MutationAdapter:null;Adapter||console.warn('Remount: This browser doesn\'t support the MutationObserver API or the Custom Elements API. Including polyfills might fix this. Remount elements will not work. https://github.com/rstacruz/remount');const adapterName=Adapter&&Adapter.name;function define(a,b){Adapter&&Object.keys(a).forEach((c)=>{const d=Object.assign({},b,toElementSpec(a[c]));Adapter.defineElement(d,c,{onUpdate(a,b){const c=getProps(a,d.attributes);update(d,b,c)},onUnmount(a,b){unmount(d,b)}})})}function toElementSpec(a){return'object'==typeof a&&a.component?a:{component:a}}function getProps(a,b){const c=a.getAttribute('props-json');if(c)return JSON.parse(c);return(b||[]).reduce((b,c)=>(b[c]=a.getAttribute(c),b),{})}export{adapterName,define};
